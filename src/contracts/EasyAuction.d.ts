/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface EasyAuctionInterface extends ethers.utils.Interface {
  functions: {
    "emitAuctionCleared(uint256,uint96,uint96)": FunctionFragment;
    "emitCancellationSellOrder(uint256,uint64,uint96,uint96)": FunctionFragment;
    "emitClaimedFromOrder(uint256,uint64,uint96,uint96)": FunctionFragment;
    "emitNewAuction(uint256,address,address,uint256,uint256,uint96,uint96,uint256,uint256)": FunctionFragment;
    "emitNewSellOrder(uint256,uint64,uint96,uint96)": FunctionFragment;
    "emitNewUser(uint64,address)": FunctionFragment;
    "emitUserRegistration(address,uint64)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "emitAuctionCleared",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitCancellationSellOrder",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitClaimedFromOrder",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitNewAuction",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitNewSellOrder",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitNewUser",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emitUserRegistration",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "emitAuctionCleared",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitCancellationSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitClaimedFromOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitNewAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitNewSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitNewUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitUserRegistration",
    data: BytesLike
  ): Result;

  events: {
    "AuctionCleared(uint256,uint96,uint96)": EventFragment;
    "CancellationSellOrder(uint256,uint64,uint96,uint96)": EventFragment;
    "ClaimedFromOrder(uint256,uint64,uint96,uint96)": EventFragment;
    "NewAuction(uint256,address,address,uint256,uint256,uint96,uint96,uint256,uint256)": EventFragment;
    "NewSellOrder(uint256,uint64,uint96,uint96)": EventFragment;
    "NewUser(uint64,address)": EventFragment;
    "UserRegistration(address,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancellationSellOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedFromOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSellOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRegistration"): EventFragment;
}

export class EasyAuction extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EasyAuctionInterface;

  functions: {
    emitAuctionCleared(
      auctionId: BigNumberish,
      priceNumerator: BigNumberish,
      priceDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emitAuctionCleared(uint256,uint96,uint96)"(
      auctionId: BigNumberish,
      priceNumerator: BigNumberish,
      priceDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emitCancellationSellOrder(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emitCancellationSellOrder(uint256,uint64,uint96,uint96)"(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emitClaimedFromOrder(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emitClaimedFromOrder(uint256,uint64,uint96,uint96)"(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emitNewAuction(
      auctionId: BigNumberish,
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emitNewAuction(uint256,address,address,uint256,uint256,uint96,uint96,uint256,uint256)"(
      auctionId: BigNumberish,
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emitNewSellOrder(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emitNewSellOrder(uint256,uint64,uint96,uint96)"(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emitNewUser(
      userId: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emitNewUser(uint64,address)"(
      userId: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emitUserRegistration(
      user: string,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emitUserRegistration(address,uint64)"(
      user: string,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  emitAuctionCleared(
    auctionId: BigNumberish,
    priceNumerator: BigNumberish,
    priceDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emitAuctionCleared(uint256,uint96,uint96)"(
    auctionId: BigNumberish,
    priceNumerator: BigNumberish,
    priceDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emitCancellationSellOrder(
    auctionId: BigNumberish,
    userId: BigNumberish,
    buyAmount: BigNumberish,
    sellAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emitCancellationSellOrder(uint256,uint64,uint96,uint96)"(
    auctionId: BigNumberish,
    userId: BigNumberish,
    buyAmount: BigNumberish,
    sellAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emitClaimedFromOrder(
    auctionId: BigNumberish,
    userId: BigNumberish,
    buyAmount: BigNumberish,
    sellAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emitClaimedFromOrder(uint256,uint64,uint96,uint96)"(
    auctionId: BigNumberish,
    userId: BigNumberish,
    buyAmount: BigNumberish,
    sellAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emitNewAuction(
    auctionId: BigNumberish,
    _auctioningToken: string,
    _biddingToken: string,
    orderCancellationEndDate: BigNumberish,
    auctionEndDate: BigNumberish,
    _auctionedSellAmount: BigNumberish,
    _minBuyAmount: BigNumberish,
    minimumBiddingAmountPerOrder: BigNumberish,
    minFundingThreshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emitNewAuction(uint256,address,address,uint256,uint256,uint96,uint96,uint256,uint256)"(
    auctionId: BigNumberish,
    _auctioningToken: string,
    _biddingToken: string,
    orderCancellationEndDate: BigNumberish,
    auctionEndDate: BigNumberish,
    _auctionedSellAmount: BigNumberish,
    _minBuyAmount: BigNumberish,
    minimumBiddingAmountPerOrder: BigNumberish,
    minFundingThreshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emitNewSellOrder(
    auctionId: BigNumberish,
    userId: BigNumberish,
    buyAmount: BigNumberish,
    sellAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emitNewSellOrder(uint256,uint64,uint96,uint96)"(
    auctionId: BigNumberish,
    userId: BigNumberish,
    buyAmount: BigNumberish,
    sellAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emitNewUser(
    userId: BigNumberish,
    userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emitNewUser(uint64,address)"(
    userId: BigNumberish,
    userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emitUserRegistration(
    user: string,
    userId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emitUserRegistration(address,uint64)"(
    user: string,
    userId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    emitAuctionCleared(
      auctionId: BigNumberish,
      priceNumerator: BigNumberish,
      priceDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emitAuctionCleared(uint256,uint96,uint96)"(
      auctionId: BigNumberish,
      priceNumerator: BigNumberish,
      priceDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emitCancellationSellOrder(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emitCancellationSellOrder(uint256,uint64,uint96,uint96)"(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emitClaimedFromOrder(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emitClaimedFromOrder(uint256,uint64,uint96,uint96)"(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emitNewAuction(
      auctionId: BigNumberish,
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emitNewAuction(uint256,address,address,uint256,uint256,uint96,uint96,uint256,uint256)"(
      auctionId: BigNumberish,
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emitNewSellOrder(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emitNewSellOrder(uint256,uint64,uint96,uint96)"(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emitNewUser(
      userId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "emitNewUser(uint64,address)"(
      userId: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emitUserRegistration(
      user: string,
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emitUserRegistration(address,uint64)"(
      user: string,
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AuctionCleared(
      auctionId: BigNumberish | null,
      priceNumerator: null,
      priceDenominator: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        auctionId: BigNumber;
        priceNumerator: BigNumber;
        priceDenominator: BigNumber;
      }
    >;

    CancellationSellOrder(
      auctionId: BigNumberish | null,
      userId: BigNumberish | null,
      buyAmount: null,
      sellAmount: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        auctionId: BigNumber;
        userId: BigNumber;
        buyAmount: BigNumber;
        sellAmount: BigNumber;
      }
    >;

    ClaimedFromOrder(
      auctionId: BigNumberish | null,
      userId: BigNumberish | null,
      buyAmount: null,
      sellAmount: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        auctionId: BigNumber;
        userId: BigNumber;
        buyAmount: BigNumber;
        sellAmount: BigNumber;
      }
    >;

    NewAuction(
      auctionId: BigNumberish | null,
      _auctioningToken: string | null,
      _biddingToken: string | null,
      orderCancellationEndDate: null,
      auctionEndDate: null,
      _auctionedSellAmount: null,
      _minBuyAmount: null,
      minimumBiddingAmountPerOrder: null,
      minFundingThreshold: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        auctionId: BigNumber;
        _auctioningToken: string;
        _biddingToken: string;
        orderCancellationEndDate: BigNumber;
        auctionEndDate: BigNumber;
        _auctionedSellAmount: BigNumber;
        _minBuyAmount: BigNumber;
        minimumBiddingAmountPerOrder: BigNumber;
        minFundingThreshold: BigNumber;
      }
    >;

    NewSellOrder(
      auctionId: BigNumberish | null,
      userId: BigNumberish | null,
      buyAmount: null,
      sellAmount: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        auctionId: BigNumber;
        userId: BigNumber;
        buyAmount: BigNumber;
        sellAmount: BigNumber;
      }
    >;

    NewUser(
      userId: BigNumberish | null,
      userAddress: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { userId: BigNumber; userAddress: string }
    >;

    UserRegistration(
      user: string | null,
      userId: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; userId: BigNumber }
    >;
  };

  estimateGas: {
    emitAuctionCleared(
      auctionId: BigNumberish,
      priceNumerator: BigNumberish,
      priceDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emitAuctionCleared(uint256,uint96,uint96)"(
      auctionId: BigNumberish,
      priceNumerator: BigNumberish,
      priceDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emitCancellationSellOrder(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emitCancellationSellOrder(uint256,uint64,uint96,uint96)"(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emitClaimedFromOrder(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emitClaimedFromOrder(uint256,uint64,uint96,uint96)"(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emitNewAuction(
      auctionId: BigNumberish,
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emitNewAuction(uint256,address,address,uint256,uint256,uint96,uint96,uint256,uint256)"(
      auctionId: BigNumberish,
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emitNewSellOrder(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emitNewSellOrder(uint256,uint64,uint96,uint96)"(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emitNewUser(
      userId: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emitNewUser(uint64,address)"(
      userId: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emitUserRegistration(
      user: string,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emitUserRegistration(address,uint64)"(
      user: string,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    emitAuctionCleared(
      auctionId: BigNumberish,
      priceNumerator: BigNumberish,
      priceDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emitAuctionCleared(uint256,uint96,uint96)"(
      auctionId: BigNumberish,
      priceNumerator: BigNumberish,
      priceDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emitCancellationSellOrder(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emitCancellationSellOrder(uint256,uint64,uint96,uint96)"(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emitClaimedFromOrder(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emitClaimedFromOrder(uint256,uint64,uint96,uint96)"(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emitNewAuction(
      auctionId: BigNumberish,
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emitNewAuction(uint256,address,address,uint256,uint256,uint96,uint96,uint256,uint256)"(
      auctionId: BigNumberish,
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emitNewSellOrder(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emitNewSellOrder(uint256,uint64,uint96,uint96)"(
      auctionId: BigNumberish,
      userId: BigNumberish,
      buyAmount: BigNumberish,
      sellAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emitNewUser(
      userId: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emitNewUser(uint64,address)"(
      userId: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emitUserRegistration(
      user: string,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emitUserRegistration(address,uint64)"(
      user: string,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
